Things I did today:
I downloaded all the dependencies that the paint.py file needs to run, made it executable
and it takes parameters for file and number of colors from the the command line in the form

rosrun robot_art paint.py [file] [k]

Assuming the pointilism file works as expected, I think the paint.py file should be ready to go. 
I also needed to at a IMG_SIZE variable to paint.py--I am unsure of its purpose. 

In terms of the apriltags, I did not have any time to really test them since I spent 
all day debugging the paint.py/paint_libr.py/actuation_lib.py files. 

I did find that the tags are not especially accurate and the camera has trouble even 
recognizing tags if they are not ridiculously large. Instead of a  dynamic setup where
the positions are constantly updated (which is really unnecessary, since nothing should be
moving), you may want to use the large tags to calibrate positions and then hardcode these 
values. Or you could not use the apriltags. I leave this decision up to you. If you choose to hardcode
values, simply add them to the pos dictionary in paint_libr.py and comment out the subscriber 
code in the update_pos function. 

I also just recently added publisher/subscriber code, and as far as I can tell, it is working,
but I don't actually know and I don't have time to check. 







Here are the instructions for running with the apriltags if you would like to. 

First, make sure the camera usb is plugged into one of the usb outlets on the youbot (or
maybe your laptop--but I have not tested this since I use the lab computers)
and also that the camera is plugged into an outlet. 


Second, you must be running 3 separate launch files:

1) For the youbot motors (same as always):

	roslaunch pose_3d pose3d_youbot.launch

2) For the camera:

	roslaunch freenect_launch freenect.launch

3) For the apriltags:

	roslaunch apriltags_ros example.launch





Third (optional, but highly recommended), if you want to see the image, run

	rosrun image_view image_view image:=/tag_detections_image

This subscribes to the tag_detections_image topic that the apriltags is publishing.
It will show the view of the camera and will superimpose red circles over each tag it detects
along with the tag number it identifies as. Before you start painting, I recommend you look
at the image and make sure that the camera recognizes all the tags you want to use. 
The camera has a relatively low resolution, though, and it updates very slowly, so you may
need to be patient waiting for the image to catch up if you move anything. 
Also, if you are unaware, when sshing into the robot and you want to use a GUI (like image_view),
from the robot you need to append your ssh youbot@ip_addr with -X. 

Fourth step, run the positions node as this is what will be publishing the positions of all
the tags.

	rosrun robot_art positions

Fifth and final step, run the paint.py node. I made it executable and it takes the parameters 
from the command line like:

	rosrun robot_art paint.py [file] [k]

You can can change this and hardcode the parameters; I don't care. I also made a paint_test.py 
executable file with the same functions as paint.py, so you can test any functions in main as you please. 






Trouble shooting/other notes:

Network issues: For some reason, the ip address keeps changing for the youbot, but the Mark_AP_N network seems to be 
working fine at the moment. Check the ip address. It should be 128.84.189.240. If it is anything different, you need to 
change the .bashrc file. 

Apriltags:

Want to add tag: 
Look at the positions.py file; there should be a dictionary called tag_positions and another called tag_translation.
You must add the new tag to both of these dictionaries. You must also add this tag to the apriltags_ros/example.launch
file (you will most likely need sudo permission to do so). Follow the examples already there for the launch file. The tags
you are adding MUST be of the 36h11 family, which should be written in small letters above the main tag number. 

Youbot going to the wrong position:

Check calibration; there are x_dist and z_dist variables in the position.py file that you can update. They should 
correspond to the distance from the base of the arm relative tag_13. Also, for some reason, tf and the apriltags
do not seem to be accounting for orientation, so also try to make sure the camera's ray of view is roughly perpendicular 
to tag_13 as I suspect there may be issues if this is not true. 

Honestly, the tags aren't very accurate, especially for corner cases. You may need to hardcode some values. 
Do so in paint_libr.py. 





Good luck!
 
